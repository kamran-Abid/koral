<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2019\community\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="16.0">
 <Targets>
  <Target Name="C:\Users\MCTX Dell E7440\AppData\Local\Temp\tmp4455.tmp.cadir\bin\App_Code.dll">
   <Modules>
    <Module Name="app_code.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="DBCommonMethods" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetCNICNos(System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBCommonMethods.cs" Line="125">Object 'conn' can be disposed more than once in method 'DBCommonMethods.GetCNICNos(string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 125</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBCommonMethods.cs" Line="110">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DBCommonMethods.GetCNICNos(string, string, string, string, string)' could contain the following variables 'CNIC'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNames(System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBCommonMethods.cs" Line="199">Object 'conn' can be disposed more than once in method 'DBCommonMethods.GetNames(string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 199</Issue>
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBCommonMethods.cs" Line="226">Object 'conn' can be disposed more than once in method 'DBCommonMethods.GetNames(string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 226</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBCommonMethods.cs" Line="185">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DBCommonMethods.GetNames(string, string, string, string, string)' could contain the following variables 'Name'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBCommonMethods.cs" Line="212">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DBCommonMethods.GetNames(string, string, string, string, string)' could contain the following variables 'Name'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVisitorReferenceName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBCommonMethods.cs" Line="154">Object 'conn' can be disposed more than once in method 'DBCommonMethods.GetVisitorReferenceName(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 154</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBCommonMethods.cs" Line="138">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DBCommonMethods.GetVisitorReferenceName(string)' could contain the following variables 'Name'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DBManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'DBManager' because it creates members of the following IDisposable types: 'SqlDataAdapter', 'SqlCommand', 'SqlConnection'. If 'DBManager' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DataReader(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBManager.cs" Line="32">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'DBManager.DataReader(string, string)' could contain the following variables 'procedureName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteDataSet(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBManager.cs" Line="131">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'DBManager.ExecuteDataSet(string, string)' could contain the following variables 'procedureName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteDataTable(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBManager.cs" Line="162">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'DBManager.ExecuteDataTable(string, string)' could contain the following variables 'procedureName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteDataTableIDOut(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBManager.cs" Line="238">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'DBManager.ExecuteDataTableIDOut(string, string)' could contain the following variables 'procedureName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertUpdateProcedure(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBManager.cs" Line="103">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'DBManager.InsertUpdateProcedure(string, string)' could contain the following variables 'procedureName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertUpdateQuery(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBManager.cs" Line="214">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'DBManager.InsertUpdateQuery(string, string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Openconn(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBManager.cs" Line="62">'DBManager.Openconn(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectQuery(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\App_Code" File="DBManager.cs" Line="191">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'DBManager.SelectQuery(string, string, string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="SqlServerTypes">
       <Types>
        <Type Name="Utilities" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LoadLibrary(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Utilities.LoadLibrary(string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'libname' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\MCTX Dell E7440\AppData\Local\Temp\tmp4455.tmp.cadir\bin\App_Web_5wgwcphn.dll">
   <Modules>
    <Module Name="app_web_5wgwcphn.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="Setting_Forms_AddWiegandDevices" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ddlgateid_SelectedIndexChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\Setting Forms" File="AddWiegandDevices.aspx.cs" Line="87">Object 'myConnection' can be disposed more than once in method 'Setting_Forms_AddWiegandDevices.ddlgateid_SelectedIndexChanged(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 87, 96</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\Setting Forms" File="AddWiegandDevices.aspx.cs" Line="83">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'Setting_Forms_AddWiegandDevices.ddlgateid_SelectedIndexChanged(object, EventArgs)' could contain the following variables 'this.ddlgateid.SelectedItem.Value'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\MCTX Dell E7440\AppData\Local\Temp\tmp4455.tmp.cadir\bin\App_Web_c552rsf0.dll">
   <Modules>
    <Module Name="app_web_c552rsf0.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="Reports_Employee_Report" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LoadDropDowns()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\Emp_Reports" File="Employee_Report.aspx.cs" Line="89">Object 'cn' can be disposed more than once in method 'Reports_Employee_Report.LoadDropDowns()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 89, 90</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\MCTX Dell E7440\AppData\Local\Temp\tmp4455.tmp.cadir\bin\App_Web_zhihuv2u.dll">
   <Modules>
    <Module Name="app_web_zhihuv2u.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="RMS_BusinessCommunity_Details" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LoadDropDowns()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="Business_Community_Details_form.aspx.cs" Line="49">Object 'cn' can be disposed more than once in method 'RMS_BusinessCommunity_Details.LoadDropDowns()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 49, 50</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveBusinessCommunityDetails(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="Business_Community_Details_form.aspx.cs" Line="287">Object 'cn' can be disposed more than once in method 'RMS_BusinessCommunity_Details.SaveBusinessCommunityDetails(string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 287</Issue>
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="Business_Community_Details_form.aspx.cs" Line="235">Object 'stream' can be disposed more than once in method 'RMS_BusinessCommunity_Details.SaveBusinessCommunityDetails(string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 235</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="Business_Community_Details_form.aspx.cs" Line="245">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'RMS_BusinessCommunity_Details.SaveBusinessCommunityDetails(string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'CNIC', 'Name', 'Dob', 'Address', 'FatherName', 'IdentificationMark', 'BloodGroup', 'SecurityClearance', 'validityForm', 'ValidityTO', 'BusinessCategory', 'Designation', 'file', 'file'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="Business_Community_Details_form.aspx.cs" Line="271">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'RMS_BusinessCommunity_Details.SaveBusinessCommunityDetails(string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'Name', 'Dob', 'Address', 'FatherName', 'IdentificationMark', 'BloodGroup', 'SecurityClearance', 'validityForm', 'ValidityTO', 'BusinessCategory', 'Designation'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RMSWebMethod" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SaveBusinessCommunityDetailInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="RMSWebMethod.aspx.cs" Line="1565">Object 'stream' can be disposed more than once in method 'RMSWebMethod.SaveBusinessCommunityDetailInfo(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1565</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveContractorInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="RMSWebMethod.aspx.cs" Line="1329">Object 'stream' can be disposed more than once in method 'RMSWebMethod.SaveContractorInfo(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1329</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveContractorLaborInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="RMSWebMethod.aspx.cs" Line="1447">Object 'stream' can be disposed more than once in method 'RMSWebMethod.SaveContractorLaborInfo(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1447</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFamilyMember(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="RMSWebMethod.aspx.cs" Line="722">Object 'stream' can be disposed more than once in method 'RMSWebMethod.SaveFamilyMember(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 722</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFamilyMemberServant(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="RMSWebMethod.aspx.cs" Line="958">Object 'stream' can be disposed more than once in method 'RMSWebMethod.SaveFamilyMemberServant(string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 958</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveGuest(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="RMSWebMethod.aspx.cs" Line="1683">Object 'stream' can be disposed more than once in method 'RMSWebMethod.SaveGuest(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1683</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveNonResident(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="RMSWebMethod.aspx.cs" Line="1083">Object 'stream' can be disposed more than once in method 'RMSWebMethod.SaveNonResident(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1083</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveResident(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="RMSWebMethod.aspx.cs" Line="578">Object 'stream' can be disposed more than once in method 'RMSWebMethod.SaveResident(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 578</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveServant(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="RMSWebMethod.aspx.cs" Line="831">Object 'stream' can be disposed more than once in method 'RMSWebMethod.SaveServant(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 831</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveVisitor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-06-18 06:25:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Hamid Data\Saqib Data Latest\Project\PACS WEB\PVACS_Solution v 14.11-05-25-2021 - PrintSlip\PVACS_Solution v 14.10\WebSite\RMS" File="RMSWebMethod.aspx.cs" Line="1208">Object 'stream' can be disposed more than once in method 'RMSWebMethod.SaveVisitor(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1208</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 87, 96</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="Parameter">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182319.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
